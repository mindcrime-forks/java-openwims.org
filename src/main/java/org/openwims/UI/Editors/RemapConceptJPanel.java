/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openwims.UI.Editors;

import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.openwims.Objects.Lexicon.Sense;
import org.openwims.WIMGlobals;

/**
 *
 * @author jesseenglish
 */
public class RemapConceptJPanel extends javax.swing.JPanel {

    private Sense sense;
    
    /**
     * Creates new form RemapConceptJPanel
     */
    public RemapConceptJPanel(Sense sense) {
        initComponents();
        this.sense = sense;
        
        this.ConceptFTextField.setText(sense.concept());
        this.InstanceFLabel.setText(sense.getId().replaceFirst(sense.concept() + ":", ""));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ConceptFTextField = new com.jesseenglish.swingftfy.extensions.FTextField();
        fLabel1 = new com.jesseenglish.swingftfy.extensions.FLabel();
        InstanceFLabel = new com.jesseenglish.swingftfy.extensions.FLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        ConceptFTextField.setHintText("concept");
        ConceptFTextField.setPreferredSize(new java.awt.Dimension(150, 28));
        ConceptFTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ConceptFTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(ConceptFTextField, gridBagConstraints);

        fLabel1.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(fLabel1, gridBagConstraints);

        InstanceFLabel.setText("-?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        add(InstanceFLabel, gridBagConstraints);

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("WARNING: This change persists immediately!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void ConceptFTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ConceptFTextFieldKeyReleased
        if (this.sense.concept().equalsIgnoreCase(this.ConceptFTextField.getText())) {
            return;
        }
        
        validateConcept();
        updateInstance();
    }//GEN-LAST:event_ConceptFTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.jesseenglish.swingftfy.extensions.FTextField ConceptFTextField;
    private com.jesseenglish.swingftfy.extensions.FLabel InstanceFLabel;
    private com.jesseenglish.swingftfy.extensions.FLabel fLabel1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void validateConcept() {
        if (WIMGlobals.ontology().concepts().contains(this.ConceptFTextField.getText().trim())) {
            this.ConceptFTextField.setBackground(Color.WHITE);
        } else {
            this.ConceptFTextField.setBackground(new Color(1.0f, 0.6f, 0.3f));
        }
        
        this.validate();
        this.repaint();
    }
    
    private void updateInstance() {
        String concept = this.ConceptFTextField.getText().trim();
        String word = this.sense.word();
        String pos = this.sense.pos();
        
        int next = WIMGlobals.lexicon().nextInstanceNumber(concept, word, pos);
        
        String newID = concept + ":" + word + "-" + pos + "-" + next;
        
        try {
            WIMGlobals.lexicon().serializer().renameSense(sense, newID);
        } catch (Exception ex) {
            Logger.getLogger(RemapConceptJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.InstanceFLabel.setText(word + "-" + pos + "-" + next);
        sense.setId(newID);
        
        this.validate();
        this.repaint();
    }

}
