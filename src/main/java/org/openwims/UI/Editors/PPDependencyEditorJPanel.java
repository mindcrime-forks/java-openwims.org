/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openwims.UI.Editors;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import org.openwims.Objects.Preprocessor.PPDependency;
import org.openwims.Objects.Preprocessor.PPSentence;
import org.openwims.Objects.Preprocessor.PPToken;

/**
 *
 * @author jesseenglish
 */
public class PPDependencyEditorJPanel extends javax.swing.JPanel {

    private PPSentence sentence;
    private PPDependency dependency;
    private LinkedList<PPToken> tokens;
    
    /**
     * Creates new form PPDependencyEditorJPanel
     */
    public PPDependencyEditorJPanel(PPSentence sentence, PPDependency dependency, LinkedList<PPToken> tokens) {
        this.sentence = sentence;
        this.dependency = dependency;
        this.tokens = tokens;
        
        initComponents();
        
        
        this.TypeJTextField.setText(dependency.getType());
        
        loadComboBox(this.GovernorJComboBox, tokens);
        loadComboBox(this.DependentJComboBox, tokens);
        
        this.GovernorJComboBox.setSelectedItem(dependency.getGovernor());
        this.DependentJComboBox.setSelectedItem(dependency.getDependent());
        
        this.GovernorJComboBox.setRenderer(new PPTokenListCellRenderer());
        this.DependentJComboBox.setRenderer(new PPTokenListCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TypeJTextField = new com.jesseenglish.swingftfy.extensions.FTextField();
        GovernorJComboBox = new javax.swing.JComboBox();
        DependentJComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FillerJPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        TypeJTextField.setHintText("type");
        TypeJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TypeJTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(TypeJTextField, gridBagConstraints);

        GovernorJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        GovernorJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                GovernorJComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(GovernorJComboBox, gridBagConstraints);

        DependentJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DependentJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DependentJComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(DependentJComboBox, gridBagConstraints);

        jLabel1.setText("Governor:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Dependent:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(jLabel2, gridBagConstraints);

        FillerJPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weighty = 0.1;
        add(FillerJPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void TypeJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TypeJTextFieldKeyReleased
        this.dependency.setType(this.TypeJTextField.getText().trim());
    }//GEN-LAST:event_TypeJTextFieldKeyReleased

    private void GovernorJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_GovernorJComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            this.dependency.setGovernor((PPToken)this.GovernorJComboBox.getSelectedItem());
        }
    }//GEN-LAST:event_GovernorJComboBoxItemStateChanged

    private void DependentJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DependentJComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            this.dependency.setDependent((PPToken)this.DependentJComboBox.getSelectedItem());
        }
    }//GEN-LAST:event_DependentJComboBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DependentJComboBox;
    private javax.swing.JPanel FillerJPanel;
    private javax.swing.JComboBox GovernorJComboBox;
    private com.jesseenglish.swingftfy.extensions.FTextField TypeJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables


    private void loadComboBox(JComboBox comboBox, LinkedList<PPToken> tokens) {
        
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for (PPToken token : tokens) {
            model.addElement(token);
        }
        
        comboBox.setModel(model);
        
        this.validate();
        this.repaint();
    }
    
    
    
    
    
    private class PPTokenListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList jlist, Object o, int i, boolean bln, boolean bln1) {
            PPToken token = (PPToken)o;
            JLabel label = (JLabel)super.getListCellRendererComponent(jlist, o, i, bln, bln1);
            label.setText(token.anchor(sentence));
            
            return label;
        }
        
    }

}
