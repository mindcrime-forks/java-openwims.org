/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openwims.UI.LexiconEditor;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Scrollable;
import javax.swing.SwingConstants;
import org.openwims.Objects.Disambiguation.Interpretation;
import org.openwims.Objects.Lexicon.DependencySet;
import org.openwims.Objects.Lexicon.Meaning;
import org.openwims.Objects.Lexicon.Sense;
import org.openwims.Objects.Preprocessor.PPDocument;
import org.openwims.Objects.Preprocessor.PPSentence;
import org.openwims.Objects.WIMFrame;
import org.openwims.Processors.Iterators.NaivePossibilityIterator;
import org.openwims.Processors.LandGrabDisambiguation;
import org.openwims.Stanford.StanfordHelper;
import org.openwims.Stanford.StanfordPPDocument;
import org.openwims.WIMGlobals;

/**
 *
 * @author jesseenglish
 */
public class SenseEditorJPanel extends javax.swing.JPanel implements Scrollable {
    
    private static BufferedImage DELETE = null;
    private static BufferedImage DELETE_OVER = null;
    
    private Sense sense;
    private LinkedList<SenseEditorListener> listeners;
    private JLabel instanceLabel;

    /**
     * Creates new form SenseEditorJPanel
     */
    public SenseEditorJPanel(Sense sense) {
        initComponents();
        this.sense = sense;
        this.listeners = new LinkedList();
        
        if (DELETE == null) {
            try {
                DELETE = ImageIO.read(DependencySetJPanel.class.getResourceAsStream("/images/glyphicons_197_remove.png"));
                DELETE_OVER = ImageIO.read(DependencySetJPanel.class.getResourceAsStream("/images/glyphicons_197_remove_OVER.png"));
            } catch (IOException ex) {
                Logger.getLogger(DependencySetJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        DefinitionFTextField = new com.jesseenglish.swingftfy.extensions.FTextField();
        jLabel3 = new javax.swing.JLabel();
        ExampleFTextField = new com.jesseenglish.swingftfy.extensions.FTextField();
        QuickTestJButton = new javax.swing.JButton();
        ResultsJLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        FrequencyFTextField = new com.jesseenglish.swingftfy.extensions.FTextField();
        DependenciesJPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        SaveJButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        SenseLabelContainerJPanel = new javax.swing.JPanel();
        SenseJLabel = new javax.swing.JLabel();
        SemanticsHeaderJPanel = new javax.swing.JPanel();
        fLabel1 = new com.jesseenglish.swingftfy.extensions.FLabel();
        AddSemanticsJLabel = new com.jesseenglish.swingftfy.extensions.FLabel();
        SemanticsContentsJPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("definition");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(jLabel2, gridBagConstraints);

        DefinitionFTextField.setHintText("definition");
        DefinitionFTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                DefinitionFTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(DefinitionFTextField, gridBagConstraints);

        jLabel3.setText("example");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(jLabel3, gridBagConstraints);

        ExampleFTextField.setHintText("example");
        ExampleFTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ExampleFTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(ExampleFTextField, gridBagConstraints);

        QuickTestJButton.setText("test");
        QuickTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuickTestJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        add(QuickTestJButton, gridBagConstraints);

        ResultsJLabel.setText("results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(ResultsJLabel, gridBagConstraints);

        jLabel5.setText("frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(jLabel5, gridBagConstraints);

        FrequencyFTextField.setHintText("frequency");
        FrequencyFTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FrequencyFTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 62;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(FrequencyFTextField, gridBagConstraints);

        DependenciesJPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(DependenciesJPanel, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        SaveJButton.setText("Save");
        SaveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel2.add(SaveJButton, gridBagConstraints);

        jButton2.setText("Deprecate");
        jButton2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(jButton2, gridBagConstraints);

        SenseLabelContainerJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        SenseJLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        SenseJLabel.setText("@event:hit-v-1");
        SenseLabelContainerJPanel.add(SenseJLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 0);
        jPanel2.add(SenseLabelContainerJPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(jPanel2, gridBagConstraints);

        SemanticsHeaderJPanel.setBackground(new java.awt.Color(204, 204, 255));
        SemanticsHeaderJPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SemanticsHeaderJPanelMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SemanticsHeaderJPanelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SemanticsHeaderJPanelMouseEntered(evt);
            }
        });
        SemanticsHeaderJPanel.setLayout(new java.awt.GridBagLayout());

        fLabel1.setText("Sense-level Semantics");
        fLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        SemanticsHeaderJPanel.add(fLabel1, gridBagConstraints);

        AddSemanticsJLabel.setText("+sem");
        AddSemanticsJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AddSemanticsJLabelMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AddSemanticsJLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AddSemanticsJLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        SemanticsHeaderJPanel.add(AddSemanticsJLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(SemanticsHeaderJPanel, gridBagConstraints);

        SemanticsContentsJPanel.setBackground(new java.awt.Color(255, 255, 255));
        SemanticsContentsJPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(SemanticsContentsJPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void DefinitionFTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DefinitionFTextFieldKeyReleased
        this.sense.setDefinition(this.DefinitionFTextField.getText().trim());
    }//GEN-LAST:event_DefinitionFTextFieldKeyReleased

    private void ExampleFTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ExampleFTextFieldKeyReleased
        this.sense.setExample(this.ExampleFTextField.getText().trim());
    }//GEN-LAST:event_ExampleFTextFieldKeyReleased

    private void FrequencyFTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FrequencyFTextFieldKeyReleased
        try {
            this.sense.setFrequency(Double.parseDouble(this.FrequencyFTextField.getText().trim()));
            this.FrequencyFTextField.setBackground(Color.WHITE);
        } catch (Exception err) {
            this.FrequencyFTextField.setBackground(Color.PINK);
        }
        this.validate();
        this.repaint();
    }//GEN-LAST:event_FrequencyFTextFieldKeyReleased

    private void SemanticsHeaderJPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SemanticsHeaderJPanelMouseEntered
        this.SemanticsHeaderJPanel.setBackground(new java.awt.Color(175, 175, 224));
        this.validate();
        this.repaint();
    }//GEN-LAST:event_SemanticsHeaderJPanelMouseEntered

    private void SemanticsHeaderJPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SemanticsHeaderJPanelMouseExited
        this.SemanticsHeaderJPanel.setBackground(new java.awt.Color(204, 204, 255));
        this.validate();
        this.repaint();
    }//GEN-LAST:event_SemanticsHeaderJPanelMouseExited

    private void SemanticsHeaderJPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SemanticsHeaderJPanelMouseReleased
        this.SemanticsContentsJPanel.setVisible(!this.SemanticsContentsJPanel.isVisible());
        this.validate();
        this.repaint();
    }//GEN-LAST:event_SemanticsHeaderJPanelMouseReleased

    private void AddSemanticsJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddSemanticsJLabelMouseEntered
        this.AddSemanticsJLabel.setBold(true);
        this.validate();
        this.repaint();
    }//GEN-LAST:event_AddSemanticsJLabelMouseEntered

    private void AddSemanticsJLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddSemanticsJLabelMouseExited
        this.AddSemanticsJLabel.setBold(false);
        this.validate();
        this.repaint();
    }//GEN-LAST:event_AddSemanticsJLabelMouseExited

    private void AddSemanticsJLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddSemanticsJLabelMouseReleased
        this.sense.addMeaning(new Meaning("SELF", "   ", "   "));
        this.refresh();
    }//GEN-LAST:event_AddSemanticsJLabelMouseReleased

    private void SaveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveJButtonActionPerformed
        try {
            WIMGlobals.lexicon().serializer().saveSense(this.sense);
        } catch (Exception ex) {
            Logger.getLogger(SenseEditorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveJButtonActionPerformed

    private void QuickTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuickTestJButtonActionPerformed
        //Quick Test
        PPDocument document = new StanfordPPDocument(StanfordHelper.annotate(this.sense.getExample()));
        NaivePossibilityIterator iterator = new NaivePossibilityIterator(document);
        LandGrabDisambiguation disambiguator = new LandGrabDisambiguation();
        LinkedList<Interpretation> interpretations = disambiguator.wse(iterator);
        
        double bestScore = 0.0;
        double bestMatch = 0.0;
        for (Interpretation interpretation : interpretations) {
            double score = interpretation.score();
            if (score > bestScore) {
                bestScore = score;
            }
            for (WIMFrame frame : interpretation.wim().listFrames()) {
                if (frame.getAnchors().containsValue(this.sense)) {
                    if (score > bestMatch) {
                        bestMatch = score;
                    }
                }
            }
        }
        
        try {
            if (bestMatch == 0.0) {
                this.ResultsJLabel.setIcon(new ImageIcon(ImageIO.read(SenseEditorJPanel.class.getResourceAsStream("/images/error.png"))));
            } else if (bestMatch != bestScore) {
                this.ResultsJLabel.setIcon(new ImageIcon(ImageIO.read(SenseEditorJPanel.class.getResourceAsStream("/images/warning.png"))));
            } else {
                this.ResultsJLabel.setIcon(new ImageIcon(ImageIO.read(SenseEditorJPanel.class.getResourceAsStream("/images/mandatory.png"))));
            }
        } catch (Exception err) {}
        
        this.ResultsJLabel.setText("");
        this.ResultsJLabel.setVisible(true);
        this.validate();
        this.repaint();
    }//GEN-LAST:event_QuickTestJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.jesseenglish.swingftfy.extensions.FLabel AddSemanticsJLabel;
    private com.jesseenglish.swingftfy.extensions.FTextField DefinitionFTextField;
    private javax.swing.JPanel DependenciesJPanel;
    private com.jesseenglish.swingftfy.extensions.FTextField ExampleFTextField;
    private com.jesseenglish.swingftfy.extensions.FTextField FrequencyFTextField;
    private javax.swing.JButton QuickTestJButton;
    private javax.swing.JLabel ResultsJLabel;
    private javax.swing.JButton SaveJButton;
    private javax.swing.JPanel SemanticsContentsJPanel;
    private javax.swing.JPanel SemanticsHeaderJPanel;
    private javax.swing.JLabel SenseJLabel;
    private javax.swing.JPanel SenseLabelContainerJPanel;
    private com.jesseenglish.swingftfy.extensions.FLabel fLabel1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    public void addSenseEditorListener(SenseEditorListener listener) {
        this.listeners.add(listener);
    }
    
    public void fireDependencySetDeletedListeners(DependencySet set) {
        for (SenseEditorListener listener : listeners) {
            listener.dependencySetRemoved(sense, set);
        }
    }
    
    public void refresh() {
        this.SenseJLabel.setText(sense.getId());
        this.DefinitionFTextField.setText(sense.getDefinition());
        this.ExampleFTextField.setText(sense.getExample());
        this.FrequencyFTextField.setText("" + sense.getFrequency());
        this.ResultsJLabel.setVisible(false);
        
        this.SenseLabelContainerJPanel.removeAll();
        this.SenseLabelContainerJPanel.add(new ConceptJTextField(sense));
        JLabel wordLabel = new JLabel(":" + sense.word() + "-");
        wordLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20));
        this.SenseLabelContainerJPanel.add(wordLabel);
        this.SenseLabelContainerJPanel.add(new POSJTextField(sense));
        this.instanceLabel = new JLabel("-" + sense.instance());
        this.instanceLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20));
        this.SenseLabelContainerJPanel.add(this.instanceLabel);
        
        {
            this.SemanticsContentsJPanel.removeAll();
            GridBagConstraints c = new GridBagConstraints();
            
            if (sense.listMeanings().size() == 0) {
                c.gridx = 0;
                c.gridy = 0;
                c.weightx = 0.1;
                c.weighty = 0.0;
                c.anchor = GridBagConstraints.WEST;
                c.insets = new Insets(0, 5, 0, 0);
                
                JLabel label = new JLabel("inherited only");
                label.setFont(label.getFont().deriveFont(Font.ITALIC));
                this.SemanticsContentsJPanel.add(label, c);
            } else {
                c.gridy = -1;
                
                for (Meaning meaning : sense.listMeanings()) {
                    c.gridx = 0;
                    c.gridy++;
                    c.weightx = 0.1;
                    c.weighty = 0.0;
                    c.fill = GridBagConstraints.HORIZONTAL;
                    c.insets = new Insets(1, 5, 0, 0);
                    
                    this.SemanticsContentsJPanel.add(new MeaningJPanel(meaning), c);
                }
                
                c.gridx = 0;
                c.gridy++;
                c.weightx = 0.1;
                c.weighty = 0.1;
                c.fill = GridBagConstraints.BOTH;
                c.insets = new Insets(0, 0, 0, 0);
                
                JPanel filler = new JPanel();
                filler.setBackground(Color.WHITE);
                this.SemanticsContentsJPanel.add(filler, c);
            }
            
        }
        
        {
            this.DependenciesJPanel.removeAll();
            GridBagConstraints c = new GridBagConstraints();
            c.gridy = -1;

            LinkedList<DependencySet> dependencies = sense.listDependencySets();
            Collections.sort(dependencies, new DependencySetComparator());

            for (DependencySet dependencySet : dependencies) {
                c.gridx = 0;
                c.gridy++;
                c.weightx = 0.0;
                c.weighty = 0.0;
                c.fill = GridBagConstraints.BOTH;
                this.DependenciesJPanel.add(new DeletableDependencySetJPanel(dependencySet), c);
            }

            c.gridy++;
            c.weightx = 0.1;
            c.weighty = 0.1;
            c.fill = GridBagConstraints.BOTH;
            this.DependenciesJPanel.add(new JPanel(), c);
        }
        
        this.validate();
        this.repaint();
    }
    
    public Dimension getPreferredScrollableViewportSize() {
        return getPreferredSize();
    }

    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
       return 16;
    }

    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
        return ((orientation == SwingConstants.VERTICAL) ? visibleRect.height : visibleRect.width) - 16;
    }

    public boolean getScrollableTracksViewportWidth() {
        return true;
    }

    public boolean getScrollableTracksViewportHeight() {
        return false;
    }

    public Sense getSense() {
        return sense;
    }
    
    public interface SenseEditorListener {
        public void dependencySetRemoved(Sense sense, DependencySet set);
    }
    
    private class ConceptJTextField extends DiscreteJTextField implements KeyListener, FocusListener {
        
        private Sense sense;
        private boolean changed;
        
        public ConceptJTextField(Sense sense) {
            super(sense.concept());
            this.sense = sense;
            this.changed = false;
            this.setFont(new java.awt.Font("Lucida Grande", 1, 20));
            this.setBackground(new Color(238, 238, 238));
            this.setBorder(null);
            this.addKeyListener(this);
            this.addFocusListener(this);
        }

        @Override
        protected boolean error() {
            if (!WIMGlobals.ontology().doesConceptExist(this.sense.concept())) {
                return true;
            }
            
            return false;
        }

        public void keyTyped(KeyEvent e) {}

        public void keyPressed(KeyEvent e) {}

        public void keyReleased(KeyEvent e) {
            if (!this.getText().trim().equals(this.sense.concept())) {
                changed = true;
            }
            this.sense.setConcept(this.getText().trim());
            this.validate();
            this.repaint();
        }

        public void focusGained(FocusEvent e) {}

        public void focusLost(FocusEvent e) {
            if (changed) {
                this.sense.setInstance(WIMGlobals.lexicon().nextInstanceNumber(this.sense.concept(), this.sense.word(), this.sense.pos()));
                SenseEditorJPanel.this.instanceLabel.setText("-" + this.sense.instance());
                changed = false;
            }
        }
        
    }
    
    private class POSJTextField extends DiscreteJTextField implements KeyListener, FocusListener {
        
        private Sense sense;
        private boolean changed;
        
        public POSJTextField(Sense sense) {
            super(sense.pos());
            this.sense = sense;
            this.changed = false;
            this.setFont(new java.awt.Font("Lucida Grande", 1, 20));
            this.setBackground(new Color(238, 238, 238));
            this.setBorder(null);
            this.addKeyListener(this);
            this.addFocusListener(this);
        }

        @Override
        protected boolean error() {
            if (!WIMGlobals.tagmaps().doesTagExist(sense.pos())) {
                return true;
            }
            
            return false;
        }

        public void keyTyped(KeyEvent e) {}

        public void keyPressed(KeyEvent e) {}

        public void keyReleased(KeyEvent e) {
            if (!this.getText().trim().equals(this.sense.pos())) {
                changed = true;
            }
            this.sense.setPos(this.getText().trim());
            this.validate();
            this.repaint();
        }
        
        public void focusGained(FocusEvent e) {}

        public void focusLost(FocusEvent e) {
            if (changed) {
                this.sense.setInstance(WIMGlobals.lexicon().nextInstanceNumber(this.sense.concept(), this.sense.word(), this.sense.pos()));
                SenseEditorJPanel.this.instanceLabel.setText("-" + this.sense.instance());
                changed = false;
            }
        }
        
    }
    
    private class DependencySetComparator implements Comparator<DependencySet> {

        public int compare(DependencySet o1, DependencySet o2) {
            if (!o1.optional && o2.optional) {
                return -1;
            } else if (o1.optional && !o2.optional) {
                return 1;
            } else {
                return o1.label.compareTo(o2.label);
            }
        }
        
    }
    
    private class DeletableDependencySetJPanel extends DependencySetJPanel {

        public DeletableDependencySetJPanel(DependencySet dependencySet) {
            super(dependencySet);
            
            JPanel header = getHeader();
            
            GridBagConstraints c = new GridBagConstraints();
            c.gridx = header.getComponentCount();
            c.gridy = 0;
            c.weightx = 0.0;
            c.weighty = 0.0;
            c.insets = new Insets(1, 0, 0, 5);
                        
            header.add(new DeleteDependencySetJLabel(dependencySet), c);
        }
        
    }
    
    private class DeleteDependencySetJLabel extends JLabel implements MouseListener {
        
        private DependencySet dependencySet;

        public DeleteDependencySetJLabel(DependencySet dependencySet) {
            this.dependencySet = dependencySet;
            this.setIcon(new ImageIcon(DELETE.getScaledInstance(12, 12, Image.SCALE_SMOOTH)));
            this.addMouseListener(this);
        }

        public void mouseClicked(MouseEvent e) {}

        public void mousePressed(MouseEvent e) {}

        public void mouseReleased(MouseEvent e) {
            SenseEditorJPanel.this.sense.removeDependencySet(dependencySet);
            SenseEditorJPanel.this.fireDependencySetDeletedListeners(dependencySet);
            SenseEditorJPanel.this.refresh();
        }

        public void mouseEntered(MouseEvent e) {
            this.setIcon(new ImageIcon(DELETE_OVER.getScaledInstance(12, 12, Image.SCALE_SMOOTH)));
            this.validate();
            this.repaint();
        }

        public void mouseExited(MouseEvent e) {
            this.setIcon(new ImageIcon(DELETE.getScaledInstance(12, 12, Image.SCALE_SMOOTH)));
            this.validate();
            this.repaint();
        }
        
    }
    
    private class MeaningJPanel extends JPanel {
        
        private Meaning meaning;

        public MeaningJPanel(Meaning meaning) {
            this.meaning = meaning;
            this.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
            this.setBackground(Color.WHITE);
            
            this.add(new DeleteMeaningJLabel(meaning));
            this.add(new JLabel(" "));
            this.add(new JLabel("SELF"));
            this.add(new JLabel(" . "));
            this.add(new MeaningRelationJTextField(meaning));
            this.add(new JLabel(" = "));
            this.add(new MeaningWIMJTextField(meaning));
        }
        
    }
    
    private class DeleteMeaningJLabel extends JLabel implements MouseListener {
        
        private Meaning meaning;

        public DeleteMeaningJLabel(Meaning meaning) {
            this.meaning = meaning;
            this.setIcon(new ImageIcon(DELETE.getScaledInstance(12, 12, Image.SCALE_SMOOTH)));
            this.addMouseListener(this);
        }

        public void mouseClicked(MouseEvent e) {}

        public void mousePressed(MouseEvent e) {}

        public void mouseReleased(MouseEvent e) {
            SenseEditorJPanel.this.sense.removeMeaning(meaning);
            SenseEditorJPanel.this.refresh();
        }

        public void mouseEntered(MouseEvent e) {
            this.setIcon(new ImageIcon(DELETE_OVER.getScaledInstance(12, 12, Image.SCALE_SMOOTH)));
        }

        public void mouseExited(MouseEvent e) {
            this.setIcon(new ImageIcon(DELETE.getScaledInstance(12, 12, Image.SCALE_SMOOTH)));
        }
        
    }

    private class MeaningRelationJTextField extends DiscreteJTextField implements KeyListener {
        
        private Meaning meaning;
        private String[] relations = new String[] { "agent", "theme", "instrument", "beneficiary", "possesses", "location", "time", "destination", "purpose", "date", "duration" };
        
        public MeaningRelationJTextField(Meaning meaning) {
            super(meaning.relation);
            this.meaning = meaning;
            this.addKeyListener(this);
        }

        @Override
        protected boolean warning() {
            for (String relation : relations) {
                if (relation.equals(this.meaning.relation)) {
                    return false;
                }
            }
            
            return true;
        }

        public void keyTyped(KeyEvent e) {}

        public void keyPressed(KeyEvent e) {}

        public void keyReleased(KeyEvent e) {
            this.meaning.relation = this.getText().trim();
            this.setText(this.getText().trim());
            this.validate();
            this.repaint();
        }
        
    }
    
    private class MeaningWIMJTextField extends DiscreteJTextField implements KeyListener {
        
        private Meaning meaning;
        
        public MeaningWIMJTextField(Meaning meaning) {
            super(meaning.wim);
            this.meaning = meaning;
            this.addKeyListener(this);
        }
        
        @Override
        protected boolean error() {
            
            if (this.getText().startsWith("\"") && this.getText().endsWith("\"") && this.getText().length() > 1) {
                return false;
            }
            
            return true;
        }

        public void keyTyped(KeyEvent e) {}

        public void keyPressed(KeyEvent e) {}

        public void keyReleased(KeyEvent e) {
            this.meaning.wim = this.getText().trim();
            this.setText(this.getText().trim());
            this.validate();
            this.repaint();
        }
        
    }
    
}
