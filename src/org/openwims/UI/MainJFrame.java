/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openwims.UI;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.semgraph.SemanticGraph;
import edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations;
import edu.stanford.nlp.util.CoreMap;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.io.File;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openwims.Objects.Lexicon.Sense;
import org.openwims.Objects.Lexicon.Word;
import org.openwims.Objects.Preprocessor.PPDocument;
import org.openwims.Objects.WIMFrame;
import org.openwims.Stanford.StanfordHelper;
import org.openwims.WIMGlobals;
import org.openwims.WIMProcessor;

/**
 *
 * @author jesse
 */
public class MainJFrame extends javax.swing.JFrame {
    
    private PPDocument document;
    private OntologyJTree ontologyTree;
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        this.setSize(800, 800);
        
        this.ontologyTree = new OntologyJTree();
        this.OntologyTreeContainerJPanel.add(this.ontologyTree);
        
        this.document = null;
        
        FileDropJPanel fileDropJPanel = new FileDropJPanel();
        fileDropJPanel.addFilesDraggedListener(new StanfordFilesDraggedEventListener());
        
        this.jPanel1.add(fileDropJPanel);
        
        this.SensesJList.addListSelectionListener(new SensesListSelectionListener());
        this.SensesJList.setCellRenderer(new SensesListCellRenderer());
        
        this.DocumentJScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        this.WIMsJScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        this.OntologyJScrollPane.getVerticalScrollBar().setUnitIncrement(16);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        LeftJTabbedPane = new javax.swing.JTabbedPane();
        LexiconJPanel = new javax.swing.JPanel();
        LexiconContainerJPanel = new javax.swing.JPanel();
        SearchJTextField = new javax.swing.JTextField();
        NewSenseJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SensesJList = new javax.swing.JList();
        SenseContainerJPanel = new javax.swing.JPanel();
        OntologyJPanel = new javax.swing.JPanel();
        SearchOntologyJTextField = new javax.swing.JTextField();
        OntologyJScrollPane = new javax.swing.JScrollPane();
        OntologyTreeContainerJPanel = new javax.swing.JPanel();
        RightJPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        InputJTextArea = new javax.swing.JTextArea();
        FullProcessJButton = new javax.swing.JButton();
        WIMifyJButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        DocumentJScrollPane = new javax.swing.JScrollPane();
        DocumentContainerJPanel = new javax.swing.JPanel();
        WIMsJScrollPane = new javax.swing.JScrollPane();
        WIMsContainerJPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        LogJTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WIMs Explorer");
        getContentPane().setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        LexiconJPanel.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        LexiconContainerJPanel.setLayout(new java.awt.GridBagLayout());

        SearchJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchJTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        LexiconContainerJPanel.add(SearchJTextField, gridBagConstraints);

        NewSenseJButton.setText("New");
        NewSenseJButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        LexiconContainerJPanel.add(NewSenseJButton, gridBagConstraints);

        SensesJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(SensesJList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        LexiconContainerJPanel.add(jScrollPane1, gridBagConstraints);

        LexiconJPanel.add(LexiconContainerJPanel);

        SenseContainerJPanel.setLayout(new java.awt.GridBagLayout());
        LexiconJPanel.add(SenseContainerJPanel);

        LeftJTabbedPane.addTab("Lexicon", LexiconJPanel);

        OntologyJPanel.setLayout(new java.awt.GridBagLayout());

        SearchOntologyJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchOntologyJTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        OntologyJPanel.add(SearchOntologyJTextField, gridBagConstraints);

        OntologyTreeContainerJPanel.setLayout(new java.awt.GridLayout(1, 1));
        OntologyJScrollPane.setViewportView(OntologyTreeContainerJPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        OntologyJPanel.add(OntologyJScrollPane, gridBagConstraints);

        LeftJTabbedPane.addTab("Ontology", OntologyJPanel);

        getContentPane().add(LeftJTabbedPane);

        RightJPanel.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setLayout(new java.awt.GridLayout(1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 52;
        gridBagConstraints.ipady = 52;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        RightJPanel.add(jPanel1, gridBagConstraints);

        InputJTextArea.setColumns(15);
        InputJTextArea.setLineWrap(true);
        InputJTextArea.setRows(3);
        InputJTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(InputJTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        RightJPanel.add(jScrollPane2, gridBagConstraints);

        FullProcessJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/process.png"))); // NOI18N
        FullProcessJButton.setPreferredSize(new java.awt.Dimension(36, 36));
        FullProcessJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullProcessJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        RightJPanel.add(FullProcessJButton, gridBagConstraints);

        WIMifyJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rerun.png"))); // NOI18N
        WIMifyJButton.setEnabled(false);
        WIMifyJButton.setPreferredSize(new java.awt.Dimension(36, 36));
        WIMifyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WIMifyJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        RightJPanel.add(WIMifyJButton, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setLayout(new java.awt.GridLayout(2, 1));

        DocumentContainerJPanel.setLayout(new java.awt.GridLayout(1, 1));
        DocumentJScrollPane.setViewportView(DocumentContainerJPanel);

        jPanel3.add(DocumentJScrollPane);

        WIMsContainerJPanel.setLayout(new java.awt.GridLayout(1, 1));
        WIMsJScrollPane.setViewportView(WIMsContainerJPanel);

        jPanel3.add(WIMsJScrollPane);

        jTabbedPane1.addTab("Results", jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout(1, 1));

        LogJTextArea.setColumns(20);
        LogJTextArea.setEditable(false);
        LogJTextArea.setLineWrap(true);
        LogJTextArea.setRows(5);
        LogJTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(LogJTextArea);

        jPanel4.add(jScrollPane3);

        jTabbedPane1.addTab("Log", jPanel4);

        jPanel2.add(jTabbedPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        RightJPanel.add(jPanel2, gridBagConstraints);

        getContentPane().add(RightJPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchJTextFieldKeyReleased
        Word word = WIMGlobals.lexicon().word(this.SearchJTextField.getText());
        
        LinkedList<Sense> senses = word.listSenses();
        Collections.sort(senses, new SenseComparator());
        
        DefaultListModel model = new DefaultListModel();
        for (Sense sense : senses) {
            model.addElement(sense);
        }
        this.SensesJList.setModel(model);
        
        this.validate();
        this.repaint();
    }//GEN-LAST:event_SearchJTextFieldKeyReleased

    private void WIMifyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WIMifyJButtonActionPerformed
        wimify();
    }//GEN-LAST:event_WIMifyJButtonActionPerformed

    private void FullProcessJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullProcessJButtonActionPerformed
        fullProcess();
    }//GEN-LAST:event_FullProcessJButtonActionPerformed

    private void SearchOntologyJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchOntologyJTextFieldKeyReleased
        String concept = this.SearchOntologyJTextField.getText().trim();
        this.ontologyTree.load(concept);
        this.validate();
        this.repaint();
    }//GEN-LAST:event_SearchOntologyJTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DocumentContainerJPanel;
    private javax.swing.JScrollPane DocumentJScrollPane;
    private javax.swing.JButton FullProcessJButton;
    private javax.swing.JTextArea InputJTextArea;
    private javax.swing.JTabbedPane LeftJTabbedPane;
    private javax.swing.JPanel LexiconContainerJPanel;
    private javax.swing.JPanel LexiconJPanel;
    private javax.swing.JTextArea LogJTextArea;
    private javax.swing.JButton NewSenseJButton;
    private javax.swing.JPanel OntologyJPanel;
    private javax.swing.JScrollPane OntologyJScrollPane;
    private javax.swing.JPanel OntologyTreeContainerJPanel;
    private javax.swing.JPanel RightJPanel;
    private javax.swing.JTextField SearchJTextField;
    private javax.swing.JTextField SearchOntologyJTextField;
    private javax.swing.JPanel SenseContainerJPanel;
    private javax.swing.JList SensesJList;
    private javax.swing.JButton WIMifyJButton;
    private javax.swing.JPanel WIMsContainerJPanel;
    private javax.swing.JScrollPane WIMsJScrollPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void load(Sense sense) {
        this.SenseContainerJPanel.removeAll();
        
        GridBagConstraints c = new GridBagConstraints();
        c.weightx = 0.1;
        c.weighty = 0.1;
        c.fill = GridBagConstraints.BOTH;
        c.insets = new Insets(5, 5, 5, 5);
        
        JScrollPane scroller = new JScrollPane(new SenseJTree(sense));
        
        this.SenseContainerJPanel.add(scroller, c);
        
        this.validate();
        this.repaint();
    }
    
    private void load(LinkedList<WIMFrame> frames) {
        this.WIMsContainerJPanel.removeAll();
        
        WIMSJTree tree = new WIMSJTree(frames);
        tree.addSenseSelectionListener(new WIMSJTree.SenseSelectionListener() {
            @Override
            public void senseSelected(Sense sense) {
                load(sense);
            }
        });
        
        this.WIMsContainerJPanel.add(tree);
        
        this.validate();
        this.repaint();
    }
    
    private void load(PPDocument document) {
        this.DocumentContainerJPanel.removeAll();
        
        PPDocumentJTree tree = new PPDocumentJTree(document);
        this.DocumentContainerJPanel.add(tree);
        
        this.validate();
        this.repaint();
    }
    
    public void setDocument(PPDocument document) {
        this.document = document;
        this.InputJTextArea.setText(this.document.text());
        this.WIMifyJButton.setEnabled(true);
        
        load(this.document);
        
        this.validate();
        this.repaint();
    }
    
    private void fullProcess() {
        String input = this.InputJTextArea.getText().trim();
        if (input.equalsIgnoreCase("")) {
            return;
        }
        
        setDocument(StanfordHelper.convert(StanfordHelper.annotate(input)));
        wimify();
    }
    
    private void wimify() {
        if (this.document == null) {
            return;
        }
        
        LinkedList<WIMFrame> frames = WIMProcessor.WIMify(this.document);
        load(frames);
    }
    
    
    private class StanfordFilesDraggedEventListener implements FileDropJPanel.FilesDraggedListener {

        @Override
        public void filesDraggedEvent(List<File> files) {
            try {
                setDocument(StanfordHelper.convert(StanfordHelper.load(files.get(0).getAbsolutePath())));
            } catch (Exception err) {
                err.printStackTrace();
            }
            
            wimify();
        }
        
    }
    
    private class SensesListSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent lse) {
            Sense sense = (Sense)SensesJList.getSelectedValue();
            if (sense == null) {
                return;
            }
            
            load(sense);
        }
        
    }
    
    private class SensesListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object o, int i, boolean bln, boolean bln1) {
            JLabel label = (JLabel)super.getListCellRendererComponent(list, o, i, bln, bln1);
            
            if (o instanceof Sense) {
                Sense sense = (Sense) o;
                label.setText(sense.getId() + "  " + sense.getDefinition());
            }
            
            return label;
        }
        
    }
    
    private class SenseComparator implements Comparator<Sense> {

        @Override
        public int compare(Sense t, Sense t1) {
            return t.getId().compareTo(t1.getId());
        }
        
    }

}
